commit 18f767c5a5b7aee2cda898dc2ee3886a4866d6d6
Author: Lars Kiesow <lkiesow@uos.de>
Date:   Mon Oct 2 12:59:57 2023 +0200

    Bump sass from 1.66.1 to 1.68.0 in /modules/admin-ui-frontend (#5295)
    
    Bumps [sass](https://github.com/sass/dart-sass) from 1.66.1 to 1.68.0.
    <details>
    <summary>Release notes</summary>
    <p><em>Sourced from <a
    href="https://github.com/sass/dart-sass/releases">sass's
    releases</a>.</em></p>
    <blockquote>
    <h2>Dart Sass 1.68.0</h2>
    <p>To install Sass 1.68.0, download one of the packages below and <a
    href="https://katiek2.github.io/path-doc/">add it to your PATH</a>, or
    see <a href="https://sass-lang.com/install">the Sass website</a> for
    full installation instructions.</p>
    <h1>Changes</h1>
    <ul>
    <li>Fix the source spans associated with the <code>abs-percent</code>
    deprecation.</li>
    </ul>
    <h3>JS API</h3>
    <ul>
    <li>
    <p>Non-filesystem importers can now set the
    <code>nonCanonicalScheme</code> field, which declares that one or more
    URL schemes (without <code>:</code>) will never be used for URLs
    returned by the <code>canonicalize()</code> method.</p>
    </li>
    <li>
    <p>Add a <code>containingUrl</code> field to the
    <code>canonicalize()</code> and <code>findFileUrl()</code> methods of
    importers, which is set to the canonical URL of the stylesheet that
    contains the current load. For filesystem importers, this is always set;
    for other importers, it's set only if the current load has no URL
    scheme, or if its URL scheme is declared as non-canonical by the
    importer.</p>
    </li>
    </ul>
    <h3>Dart API</h3>
    <ul>
    <li>
    <p>Add <code>AsyncImporter.isNonCanonicalScheme</code>, which importers
    (async or sync) can use to indicate that a certain URL scheme will never
    be used for URLs returned by the <code>canonicalize()</code> method.</p>
    </li>
    <li>
    <p>Add <code>AsyncImporter.containingUrl</code>, which is set during
    calls to the <code>canonicalize()</code> method to the canonical URL of
    the stylesheet that contains the current load. This is set only if the
    current load has no URL scheme, or if its URL scheme is declared as
    non-canonical by the importer.</p>
    </li>
    </ul>
    <h3>Embedded Sass</h3>
    <ul>
    <li>
    <p>The <code>CalculationValue.interpolation</code> field is deprecated
    and will be removed in a future version. It will no longer be set by the
    compiler, and if the host sets it it will be treated as equivalent to
    <code>CalculationValue.string</code> except that
    <code>&quot;(&quot;</code> and <code>&quot;)&quot;</code> will be added
    to the beginning and end of the string values.</p>
    </li>
    <li>
    <p>Properly include TypeScript types in the <code>sass-embedded</code>
    package.</p>
    </li>
    </ul>
    <p>See the <a
    href="https://github.com/sass/dart-sass/blob/master/CHANGELOG.md#1680">full
    changelog</a> for changes in earlier releases.</p>
    <h2>Dart Sass 1.67.0</h2>
    <p>To install Sass 1.67.0, download one of the packages below and <a
    href="https://katiek2.github.io/path-doc/">add it to your PATH</a>, or
    see <a href="https://sass-lang.com/install">the Sass website</a> for
    full installation instructions.</p>
    <h1>Changes</h1>
    <ul>
    <li>
    <p>All functions defined in CSS Values and Units 4 are now once again
    parsed as calculation objects: <code>round()</code>, <code>mod()</code>,
    <code>rem()</code>, <code>sin()</code>, <code>cos()</code>,
    <code>tan()</code>, <code>asin()</code>, <code>acos()</code>,
    <code>atan()</code>, <code>atan2()</code>, <code>pow()</code>,
    <code>sqrt()</code>, <code>hypot()</code>, <code>log()</code>,
    <code>exp()</code>, <code>abs()</code>, and <code>sign()</code>.</p>
    <p>Unlike in 1.65.0, function calls are <em>not</em> locked into being
    parsed as calculations or plain Sass functions at parse-time. This means
    that user-defined functions will take precedence over CSS calculations
    of the same name. Although the function names <code>calc()</code> and
    <code>clamp()</code> are still forbidden, users may continue to freely
    define functions whose names overlap with other CSS calculations
    (including <code>abs()</code>, <code>min()</code>, <code>max()</code>,
    and <code>round()</code> whose names overlap with global Sass
    functions).</p>
    </li>
    <li>
    <p>As a consequence of the change in calculation parsing described
    above, calculation functions containing interpolation are now parsed
    more strictly than before. However, all interpolations that would have
    produced valid CSS will continue to work, so this is not considered a
    breaking change.</p>
    </li>
    <li>
    <p>Interpolations in calculation functions that aren't used in a
    position that could also have a normal calculation value are now
    deprecated. For example, <code>calc(1px #{&quot;+ 2px&quot;})</code> is
    deprecated, but <code>calc(1px + #{&quot;2px&quot;})</code> is still
    allowed. This deprecation is named <code>calc-interp</code>. See <a
    href="https://sass-lang.com/install">the Sass website</a> for more
    information.</p>
    </li>
    <li>
    <p><strong>Potentially breaking bug fix</strong>: The importer used to
    load a given file is no longer used to load absolute URLs that appear in
    that file. This was unintented behavior that contradicted the Sass
    specification. Absolute URLs will now correctly be loaded only from the
    global importer list. This applies to the modern JS API, the Dart API,
    and the embedded protocol.</p>
    </li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Changelog</summary>
    <p><em>Sourced from <a
    href="https://github.com/sass/dart-sass/blob/main/CHANGELOG.md">sass's
    changelog</a>.</em></p>
    <blockquote>
    <h2>1.68.0</h2>
    <ul>
    <li>Fix the source spans associated with the <code>abs-percent</code>
    deprecation.</li>
    </ul>
    <h3>JS API</h3>
    <ul>
    <li>
    <p>Non-filesystem importers can now set the
    <code>nonCanonicalScheme</code> field, which
    declares that one or more URL schemes (without <code>:</code>) will
    never be used for
    URLs returned by the <code>canonicalize()</code> method.</p>
    </li>
    <li>
    <p>Add a <code>containingUrl</code> field to the
    <code>canonicalize()</code> and <code>findFileUrl()</code>
    methods of importers, which is set to the canonical URL of the
    stylesheet that
    contains the current load. For filesystem importers, this is always set;
    for
    other importers, it's set only if the current load has no URL scheme, or
    if
    its URL scheme is declared as non-canonical by the importer.</p>
    </li>
    </ul>
    <h3>Dart API</h3>
    <ul>
    <li>
    <p>Add <code>AsyncImporter.isNonCanonicalScheme</code>, which importers
    (async or sync) can
    use to indicate that a certain URL scheme will never be used for URLs
    returned
    by the <code>canonicalize()</code> method.</p>
    </li>
    <li>
    <p>Add <code>AsyncImporter.containingUrl</code>, which is set during
    calls to the
    <code>canonicalize()</code> method to the canonical URL of the
    stylesheet that contains
    the current load. This is set only if the current load has no URL
    scheme, or
    if its URL scheme is declared as non-canonical by the importer.</p>
    </li>
    </ul>
    <h3>Embedded Sass</h3>
    <ul>
    <li>
    <p>The <code>CalculationValue.interpolation</code> field is deprecated
    and will be removed
    in a future version. It will no longer be set by the compiler, and if
    the host
    sets it it will be treated as equivalent to
    <code>CalculationValue.string</code> except
    that <code>&quot;(&quot;</code> and <code>&quot;)&quot;</code> will be
    added to the beginning and end of the string
    values.</p>
    </li>
    <li>
    <p>Properly include TypeScript types in the <code>sass-embedded</code>
    package.</p>
    </li>
    </ul>
    <h2>1.67.0</h2>
    <ul>
    <li>
    <p>All functions defined in CSS Values and Units 4 are now once again
    parsed as
    calculation objects: <code>round()</code>, <code>mod()</code>,
    <code>rem()</code>, <code>sin()</code>, <code>cos()</code>,
    <code>tan()</code>,
    <code>asin()</code>, <code>acos()</code>, <code>atan()</code>,
    <code>atan2()</code>, <code>pow()</code>, <code>sqrt()</code>,
    <code>hypot()</code>,
    <code>log()</code>, <code>exp()</code>, <code>abs()</code>, and
    <code>sign()</code>.</p>
    <p>Unlike in 1.65.0, function calls are <em>not</em> locked into being
    parsed as
    calculations or plain Sass functions at parse-time. This means that
    user-defined functions will take precedence over CSS calculations of the
    same
    name. Although the function names <code>calc()</code> and
    <code>clamp()</code> are still forbidden,
    users may continue to freely define functions whose names overlap with
    other
    CSS calculations (including <code>abs()</code>, <code>min()</code>,
    <code>max()</code>, and <code>round()</code> whose</p>
    </li>
    </ul>
    <!-- raw HTML omitted -->
    </blockquote>
    <p>... (truncated)</p>
    </details>
    <details>
    <summary>Commits</summary>
    <ul>
    <li><a
    href="https://github.com/sass/dart-sass/commit/de618fa7bd74cc648f3ee62358eed3e237d4644f"><code>de618fa</code></a>
    Fix an error during embedded compiler shutdown (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2092">#2092</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/873e91e5fffefec7b6d9d6d3d79472c4cca3154e"><code>873e91e</code></a>
    Cut a release (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2090">#2090</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/13c9fb3c9d97d4d9582ccd33689111d74024261d"><code>13c9fb3</code></a>
    Expose the containing URL to importers under some circumstances (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2083">#2083</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/69f1847bae60df16fe7d7bdfdfa794da8bf8c3d4"><code>69f1847</code></a>
    CI: Configure dependabot to update GitHub Actions, too (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2087">#2087</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/c22c84d2c5cdd3d0c0333eb1c5b37bedb8b1cc3c"><code>c22c84d</code></a>
    Update changelog for <a
    href="https://redirect.github.com/sass/embedded-host-node/issues/248">sass/embedded-host-node#248</a>
    (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2086">#2086</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/37e0ed54da1bd3ba3d4f4127da3a9575f7a9224e"><code>37e0ed5</code></a>
    Fix source span for calculation deprecation warnings (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2084">#2084</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/7370d6a97df58966f72e896f8dd53dfe2ab3c4df"><code>7370d6a</code></a>
    Fix changelog for 1.67.0 (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2085">#2085</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/5c31d1f245c274ff90eded7d7ae4437c664798b9"><code>5c31d1f</code></a>
    Re-enable new calculation functions (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2080">#2080</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/bdb145f0396446dd1771229592bb31aea9c4383a"><code>bdb145f</code></a>
    Fix example (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2074">#2074</a>)</li>
    <li><a
    href="https://github.com/sass/dart-sass/commit/77e208c2044dc91ab5aa75c6a96531922592b049"><code>77e208c</code></a>
    Run cli compilations in parallel dart isolates (<a
    href="https://redirect.github.com/sass/dart-sass/issues/2078">#2078</a>)</li>
    <li>Additional commits viewable in <a
    href="https://github.com/sass/dart-sass/compare/1.66.1...1.68.0">compare
    view</a></li>
    </ul>
    </details>
    <br />
    
    
    [![Dependabot compatibility
    score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=sass&package-manager=npm_and_yarn&previous-version=1.66.1&new-version=1.68.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)
    
    Dependabot will resolve any conflicts with this PR as long as you don't
    alter it yourself. You can also trigger a rebase manually by commenting
    `@dependabot rebase`.
    
    [//]: # (dependabot-automerge-start)
    [//]: # (dependabot-automerge-end)
    
    ---
    
    <details>
    <summary>Dependabot commands and options</summary>
    <br />
    
    You can trigger Dependabot actions by commenting on this PR:
    - `@dependabot rebase` will rebase this PR
    - `@dependabot recreate` will recreate this PR, overwriting any edits
    that have been made to it
    - `@dependabot merge` will merge this PR after your CI passes on it
    - `@dependabot squash and merge` will squash and merge this PR after
    your CI passes on it
    - `@dependabot cancel merge` will cancel a previously requested merge
    and block automerging
    - `@dependabot reopen` will reopen this PR if it is closed
    - `@dependabot close` will close this PR and stop Dependabot recreating
    it. You can achieve the same result by closing it manually
    - `@dependabot show <dependency name> ignore conditions` will show all
    of the ignore conditions of the specified dependency
    - `@dependabot ignore this major version` will close this PR and stop
    Dependabot creating any more for this major version (unless you reopen
    the PR or upgrade to it yourself)
    - `@dependabot ignore this minor version` will close this PR and stop
    Dependabot creating any more for this minor version (unless you reopen
    the PR or upgrade to it yourself)
    - `@dependabot ignore this dependency` will close this PR and stop
    Dependabot creating any more for this dependency (unless you reopen the
    PR or upgrade to it yourself)
    
    
    </details>
